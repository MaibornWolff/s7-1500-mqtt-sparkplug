DATA_BLOCK "mqttGlobals"
{ DB_Accessible_From_OPC_UA := 'FALSE' ;
 S7_Optimized_Access := 'FALSE' }
AUTHOR : Brand
VERSION : 0.1
NON_RETAIN
   STRUCT 
      MQTT_KEEPALIVE : Time;
      MQTT_SOCKET_TIMEOUT : Time;
      TCP_RECVBUFFERSIZE : Int;
      TCP_MAXRECVSIZE : Int;
      TCP_SENDBUFFERSIZE : Int;
      TCP_TIMEOUT : Time;
      MQTT_STATE_DISCONNECT : Int;
      MQTT_STATE_DISCONNECTING : Int;
      MQTT_CONNECTION_TIMEOUT : Int;
      MQTT_CONNECTION_LOST : Int;
      MQTT_CONNECT_FAILED : Int;
      MQTT_DISCONNECTED : Int;
      MQTT_CONNECTING : Int;
      MQTT_CONNECTED : Int;
      MQTT_CONN_ACCEPTED : Int;
      MQTT_CONN_BAD_PROTOCOL : Int;
      MQTT_CONN_BAD_CLIENT_ID : Int;
      MQTT_CONN_SRVUNAVAIL : Int;
      MQTT_CONN_BAD_CREDEN : Int;
      MQTT_CONN_UNAUTHORIZED : Int;
      MQTTCONNECT : Int;
      MQTTCONNACK : Int;
      MQTTPUBLISH : Int;
      MQTTPUBACK : Int;
      MQTTPUBREC : Int;
      MQTTPUBREL : Int;
      MQTTPUBCOMP : Int;
      MQTTSUBSCRIBE : Int;
      MQTTSUBACK : Int;
      MQTTUNSUBSCRIBE : Int;
      MQTTUNSUBACK : Int;
      MQTTPINGREQ : Int;
      MQTTPINGRESP : Int;
      MQTTDISCONNECT : Int;
      MQTTReserved : Int;
      MQTTQOS0 : Int;
      MQTTQOS1 : Int;
      MQTTQOS2 : Int;
      SPARKPLUG_DATATYP_INT32 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Byte;
      SPARKPLUG_DATATYP_INT64 : Byte;
      SPARKPLUG_DATATYP_FLOAT : Byte;
      SPARKPLUG_DATATYP_BOOLEAN { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Byte;
      SPARKPLUG_DATATYP_STRING { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Byte;
   END_STRUCT;


BEGIN
   MQTT_KEEPALIVE := T#15S;
   MQTT_SOCKET_TIMEOUT := T#15S;
   TCP_RECVBUFFERSIZE := 1024;
   TCP_MAXRECVSIZE := 1024;
   TCP_SENDBUFFERSIZE := 1024;
   TCP_TIMEOUT := T#30S;
   MQTT_STATE_DISCONNECT := -6;
   MQTT_STATE_DISCONNECTING := -5;
   MQTT_CONNECTION_TIMEOUT := -4;
   MQTT_CONNECTION_LOST := -3;
   MQTT_CONNECT_FAILED := -2;
   MQTT_DISCONNECTED := -1;
   MQTT_CONNECTING := 0;
   MQTT_CONNECTED := 1;
   MQTT_CONN_ACCEPTED := 0;
   MQTT_CONN_BAD_PROTOCOL := 1;
   MQTT_CONN_BAD_CLIENT_ID := 2;
   MQTT_CONN_SRVUNAVAIL := 3;
   MQTT_CONN_BAD_CREDEN := 4;
   MQTT_CONN_UNAUTHORIZED := 5;
   MQTTCONNECT := 16;
   MQTTCONNACK := 32;
   MQTTPUBLISH := 48;
   MQTTPUBACK := 64;
   MQTTPUBREC := 80;
   MQTTPUBREL := 96;
   MQTTPUBCOMP := 112;
   MQTTSUBSCRIBE := 130;
   MQTTSUBACK := 144;
   MQTTUNSUBSCRIBE := 160;
   MQTTUNSUBACK := 176;
   MQTTPINGREQ := 192;
   MQTTPINGRESP := 208;
   MQTTDISCONNECT := 224;
   MQTTReserved := 240;
   MQTTQOS0 := 0;
   MQTTQOS1 := 1;
   MQTTQOS2 := 2;
   SPARKPLUG_DATATYP_INT32 := 16#03;
   SPARKPLUG_DATATYP_INT64 := 16#04;
   SPARKPLUG_DATATYP_FLOAT := 16#09;
   SPARKPLUG_DATATYP_BOOLEAN := 16#0B;
   SPARKPLUG_DATATYP_STRING := 16#0C;

END_DATA_BLOCK

FUNCTION_BLOCK "mqttRuntime"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Groschke
VERSION : 1.0
   VAR_INPUT 
      IN : Bool;
      RES : Bool;
   END_VAR

   VAR_OUTPUT 
      RTIME : Time;
   END_VAR

   VAR 
      last : DInt;
      now : DInt;
      run : DInt;
      FP_IN : Bool;
   END_VAR


BEGIN
	
	IF #IN AND NOT #FP_IN THEN
	  #last := 0;
	  #FP_IN := true;
	END_IF;
	
	IF NOT #IN AND #FP_IN THEN
	  #FP_IN := false;
	END_IF;
	
	
	IF #IN AND NOT #RES THEN
	  #now := DWORD_TO_DINT("Unixtime"());
	  IF #last = 0 THEN
	    #last := #now;
	    GOTO Out;
	  ELSE
	    #run := #run + (#now - #last);
	    #last := #now;
	  END_IF;
	  
	END_IF;
	
	IF #IN AND #RES THEN
	  #run := 0;
	  #now := 0;
	  #last := 0;
	ELSIF NOT #IN AND #RES THEN
	  #run := 0;
	  #now := 0;
	  #last := 0;
	END_IF;
	
	IF #run >= 2073600 THEN // avoid overflow of time typ 
	  #run := 0;
	END_IF;
	
	Out:
	#RTIME := DINT_TO_TIME(#run * 1000);
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "MQTT"
{ S7_Optimized_Access := 'FALSE' }
AUTHOR : Maul
VERSION : 1.0
   VAR_INPUT 
      connectionParameter : "ConParUdt";
   END_VAR

   VAR_OUTPUT 
      pubTopic : String[254];
      pubTopicChar { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} AT pubTopic : Array[0..255] of Char;
      payload : Array[0..4096] of Byte;
      payloadSize : Int;
      RecBufFull : Bool;
   END_VAR

   VAR_IN_OUT 
      callback : Bool;
      callbackPacketType : Int;
      mqttData : "MqttDataUdt";
   END_VAR

   VAR 
      tcpState : Int := 0;
      intState : Int;
      lastState : Int;
      tcpRecByte : Byte;
      myPacketReader : "mqttPacketReader";
      msgId : Int;
      typeOfPacket : Int;
      Runtimer : "mqttRuntime";
      TCP_Timer : "mqttRuntime";
      resetTime : Time;
      tl : Int;
      paylPos : Int;
      paylSize : Int;
      recBufLeft : Int;
      act_send : Bool;
      snd_busy : Bool;
      last_snd_err : Word;
      last_rec_err : Word;
      cntrl_done : Bool;
      cntrl_error : Bool;
      cntrl_status : Word;
      cntrl_lastErrStatus : Word;
      cntrl_res1 : DWord;
      cntrl_res2 : DWord;
      netcmd_success : Bool := FALSE;
      netcmd_busy : Bool := FALSE;
      netcmd_error : Bool := FALSE;
      netcmd_status : Word;
      netcmd_datareceived : Bool := FALSE;
      netcmd_datalength : Int;
      NET_CON {InstructionName := 'TCON'; LibVersion := '4.0'} : TCON;
      NET_DISCON {InstructionName := 'TDISCON'; LibVersion := '2.1'} : TDISCON;
      NET_SEND {InstructionName := 'TSEND'; LibVersion := '4.0'} : TSEND;
      NET_RCV {InstructionName := 'TRCV'; LibVersion := '4.0'} : TRCV;
      NET_CONFIG {InstructionName := 'TCON_IP_v4'; LibVersion := '1.0'} : TCON_IP_v4 := (16#64, (), 16#11, true, ([()]), (), 2000);
      BUSY_TIMER {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
   END_VAR

   VAR_TEMP 
      i : Int;
      intTemp : Int;
      TOP_SI {InstructionName := 'SI_classic'; LibVersion := '1.0'} : SI_classic;
      START_UP_SI {InstructionName := 'SI_classic'; LibVersion := '1.0'} : SI_classic;
      tmpPacketID : Int;
      structTmpPacketId AT tmpPacketID : Struct
         byteLSB : Byte;
         byteMSB : Byte;
      END_STRUCT;
   END_VAR

   VAR CONSTANT 
      TCP_STATE_UNINITIALIZED : Int := 0;
      TCP_STATE_INITIALIZING : Int := 1;
      TCP_STATE_INITIALIZED : Int := 2;
      TCP_STATE_CONNECTING : Int := 3;
      TCP_STATE_CONNECTED : Int := 4;
      TCP_STATE_DISCONNECTING : Int := 5;
      TCP_STATE_DISCONNECTED : Int := 6;
      MQTT_STATE_DISCONNECT : Int := -6;
      MQTT_STATE_DISCONNECTING : Int := -5;
      MQTT_STATE_DISCONNECTED : Int := -1;
      MQTT_STATE_CONNECTING : Int := 0;
      MQTT_STATE_CONNECTED : Int := 1;
      WAIT_FOR_RECEIVED_PACKET : Int := 0;
      READ_COMPLETE_PACKET : Int := 1;
      MQTT_CONNECT : Int := 16;
      MQTT_CONNACK : Int := 32;
      MQTT_PUBLISH : Int := 48;
      MQTT_PUBACK : Int := 64;
      MQTT_PUBREC : Int := 80;
      MQTT_PUBREL : Int := 96;
      MQTT_PUBCOMP : Int := 112;
      MQTT_SUBSCRIBE : Int := 130;
      MQTT_SUBACK : Int := 144;
      MQTT_UNSUBSCRIBE : Int := 160;
      MQTT_UNSUBACK : Int := 176;
      MQTT_PINGREQ : Int := 192;
      MQTT_PINGRESP : Int := 208;
      MQTT_DISCONNECT : Int := 224;
      PN : Int := 0;
      CP : Int := 1;
      CN_NOP : Int := 0;
      CN_STATUS : Int := 1;
      CN_RESET : Int := 2;
      CN_STATUS_ALL : Int := 3;
      CN_RESET_ALL : Int := 4;
      CN_CLEAR_RESET : Int := 5;
      CN_DISCON : Int := 6;
      CN_STARTCON : Int := 7;
   END_VAR


BEGIN
	
	(* Check IF CPU had a reset, trigger network reinitialization on reset *)
	//#intTemp := RD_SINFO(TOP_SI => #TOP_SI, START_UP_SI => #START_UP_SI);
	//IF #TOP_SI.EV_NUM <> 3 THEN
	//  #tcpState := #TCP_STATE_UNINITIALIZED;
	//  "mqttData".ethTCPConnected := false;
	//  "mqttData"._state := #MQTT_STATE_DISCONNECTED;
	//END_IF;
	
	
	(* 
	    ******************************
	    TCP/IP State Machine
	    ******************************
	*)
	CASE (#tcpState) OF
	    
	  #TCP_STATE_UNINITIALIZED:
	      #mqttData.ethTCPConnected := false;
	    #tcpState := #TCP_STATE_INITIALIZING;
	    ;
	    
	  #TCP_STATE_INITIALIZING:
	    
	    // *** PN CODE ****
	    
	    // Load IP parameters to NET_CONFIG DB variables for usage in TCON
	    
	    #NET_CONFIG.InterfaceId := 64;
	    #NET_CONFIG.ConnectionType := 16#0B;
	    #NET_CONFIG.LocalPort := 30000;
	    #NET_CONFIG.ID := INT_TO_WORD(#connectionParameter.connectionID);
	    #NET_CONFIG.RemoteAddress.ADDR[1] := INT_TO_BYTE(#connectionParameter.ipBlock1);
	    #NET_CONFIG.RemoteAddress.ADDR[2] := INT_TO_BYTE(#connectionParameter.ipBlock2);
	    #NET_CONFIG.RemoteAddress.ADDR[3] := INT_TO_BYTE(#connectionParameter.ipBlock3);
	    #NET_CONFIG.RemoteAddress.ADDR[4] := INT_TO_BYTE(#connectionParameter.ipBlock4);
	    #NET_CONFIG.RemotePort := #connectionParameter.ipPort;
	    
	    
	    #NET_CON(REQ := false // IN: BOOL
	             ,
	             ID := INT_TO_WORD(#connectionParameter.connectionID) // IN: WORD
	             ,
	             CONNECT := #NET_CONFIG // INOUT: ANY
	    );
	    
	    #NET_SEND(REQ := false // IN: BOOL
	              ,
	              ID := INT_TO_WORD(#connectionParameter.connectionID) // IN: WORD
	              ,
	              LEN := 0// IN: INT
	              ,
	              DATA := #mqttData.tcpSendBuf // INOUT: ANY
	    );
	    
	    #NET_RCV(EN_R := false // IN: BOOL
	             ,
	             ID := INT_TO_WORD(#connectionParameter.connectionID) // IN: WORD
	             ,
	             LEN := 0 // IN: INT
	             ,
	             DATA := #tcpRecByte // INOUT: ANY
	    );
	    
	    #NET_DISCON(REQ := false // IN: BOOL
	                ,
	                ID := INT_TO_WORD(#connectionParameter.connectionID) // IN: WORD
	    );
	    
	    // *** PN CODE END ****
	    
	    #tcpState := #TCP_STATE_INITIALIZED;
	    ;
	    
	  #TCP_STATE_INITIALIZED:
	    #tcpState := #TCP_STATE_CONNECTING;
	    ;
	    
	  #TCP_STATE_CONNECTING:
	    
	    // *** PN CODE ****
	    
	    #NET_CON(REQ := true // IN: BOOL
	             ,
	             ID := INT_TO_WORD(#connectionParameter.connectionID) // IN: WORD
	             ,
	             CONNECT := #NET_CONFIG // INOUT: ANY
	    );
	    #netcmd_success := #NET_CON.DONE; // OUT: BOOL
	    #netcmd_error := #NET_CON.ERROR; // OUT: BOOL
	    #netcmd_status := #NET_CON.STATUS; // OUT: WORD
	    
	    IF #netcmd_success AND (#netcmd_status = W#16#0) THEN
	        #tcpState := #TCP_STATE_CONNECTED;
	        END_IF;
	        #mqttData.ethTCPConnected := true;
	      IF #netcmd_error THEN
	        #cntrl_lastErrStatus := #netcmd_status;
	        #tcpState := #TCP_STATE_DISCONNECTED;
	      END_IF;
	
	    
	    // TCP timeout while connecting reset connection state and try again
	    
	    IF NOT #netcmd_success THEN
	      #TCP_Timer(IN := true,
	                 RES := false);
	      
	      IF TIME_TO_DINT(#TCP_Timer.RTIME) > TIME_TO_DINT("mqttGlobals".TCP_TIMEOUT) THEN
	          #tcpState := #TCP_STATE_DISCONNECTING;
	      END_IF;
	    END_IF;
	    
	    // *** PN CODE END ****
	    ;
	    
	  #TCP_STATE_CONNECTED:
	    
	    // *** PN CODE - Check TCP connection state ****
	    
	    #NET_RCV(EN_R := false // IN: BOOL
	             ,
	             ID := INT_TO_WORD(#connectionParameter.connectionID) // IN: WORD
	             ,
	             LEN := 0 // IN: INT
	             ,
	             DATA := #tcpRecByte // INOUT: ANY
	    );
	    IF #NET_RCV.STATUS <> W#16#7000 THEN
	        #tcpState := #TCP_STATE_DISCONNECTING;
	    END_IF;
	    ;
	    
	  #TCP_STATE_DISCONNECTING:
	      #mqttData.ethTCPConnected := false;
	    
	    // *** PN CODE ****
	    #NET_DISCON(REQ := true // IN: BOOL
	                ,
	                ID := INT_TO_WORD(#connectionParameter.connectionID) // IN: WORD
	    );
	    #netcmd_success := #NET_DISCON.DONE; // OUT: BOOL
	    #netcmd_busy := #NET_DISCON.BUSY; // OUT: BOOL
	    #netcmd_error := #NET_DISCON.ERROR; // OUT: BOOL
	    #netcmd_status := #NET_DISCON.STATUS; // OUT: WORD
	    
	    #tcpState := #TCP_STATE_DISCONNECTED;
	    
	    // *** PN CODE END ****
	    ;
	    
	  #TCP_STATE_DISCONNECTED:
	      #mqttData.ethTCPConnected := false;
	    #tcpState := #TCP_STATE_UNINITIALIZED;
	    #TCP_Timer(IN := false,
	               RES := true);
	    ;
	    
	  ELSE:
	    ;
	END_CASE;
	
	(*
	    *******************************************
	    MQTT Timout Handling without TCP Connection
	    *******************************************
	*)
	#Runtimer(IN := ((#mqttData._state = #MQTT_STATE_CONNECTING) OR (#mqttData._state = #MQTT_STATE_CONNECTED)),
	          RES := false);
	#mqttData.runTime := #Runtimer.RTIME;
	
	//Recalculate timeouts when timer is set to T#0
	
	IF TIME_TO_DINT(#mqttData.runTime) = 0 AND (TIME_TO_DINT(#mqttData.lastInActivity) <> 0 OR TIME_TO_DINT(#mqttData.lastOutActivity) <> 0) THEN
	  #Runtimer.run := TIME_TO_DINT("mqttGlobals".MQTT_KEEPALIVE) / 1000;
	  
	  IF TIME_TO_DINT(#mqttData.lastOutActivity) <> 0 THEN
	      #mqttData.lastOutActivity := "mqttGlobals".MQTT_KEEPALIVE - DINT_TO_TIME(2073600000 - TIME_TO_DINT(#mqttData.lastOutActivity));
	  END_IF;
	  
	  IF TIME_TO_DINT(#mqttData.lastInActivity) <> 0 THEN
	      #mqttData.lastInActivity := "mqttGlobals".MQTT_KEEPALIVE - DINT_TO_TIME(2073600000 - TIME_TO_DINT(#mqttData.lastInActivity));
	  END_IF;
	END_IF;
	
	IF (#mqttData._state = #MQTT_STATE_CONNECTING OR #mqttData._state = #MQTT_STATE_CONNECTED) AND #tcpState <> #TCP_STATE_CONNECTED THEN
	    IF ((#mqttData.runTime - #mqttData.lastInActivity) > "mqttGlobals".MQTT_KEEPALIVE) OR ((#mqttData.runTime - #mqttData.lastOutActivity) > "mqttGlobals".MQTT_KEEPALIVE) THEN
	    // Connection Timeout!
	        #mqttData._state := #MQTT_STATE_DISCONNECTED;
	        #mqttData.reqSend := false;
	    #act_send := false;
	    #snd_busy := false;
	  END_IF;
	END_IF;
	
	(* 
	    ******************************
	    TCP/IP Sending and Receiving
	    ******************************
	*)
	IF NOT (#tcpState = #TCP_STATE_CONNECTED) THEN // stop if there's no tcp connection 
	    #snd_busy := false;
	    #act_send := false;
	    RETURN;
	END_IF;
	
	(* TCP SENDING *)
	IF (#mqttData.reqSend AND NOT #snd_busy) THEN
	    #mqttData.reqSend := false;
	    #act_send := true;
	END_IF;
	
	IF #mqttData.reqSend AND #snd_busy THEN
	(* Just a try to stop the process from deadlocking when TCP connection went down *)
	    #BUSY_TIMER(IN := true,
	                PT := T#500MS);
	    
	    IF #BUSY_TIMER.Q THEN
	        #snd_busy := false; // simple reset busy because something went clearly wrong here ...
	        #BUSY_TIMER(IN := false,
	                    PT := T#500MS);
	    END_IF;
	    
	END_IF;
	
	
	// *** PN CODE ****
	#NET_SEND(REQ := #act_send // IN: BOOL
	          ,
	          ID := INT_TO_WORD(#connectionParameter.connectionID) // IN: WORD
	          ,
	            LEN := #mqttData.sendSize // IN: INT
	          ,
	            DATA := #mqttData.tcpSendBuf // INOUT: ANY
	);
	#netcmd_success := #NET_SEND.DONE; // OUT: BOOL
	#netcmd_error := #NET_SEND.ERROR; // OUT: BOOL
	#netcmd_status := #NET_SEND.STATUS; // OUT: WORD
	
	// after sending reset send buffer management
	#mqttData.sendSize := 0;
	#mqttData.tcp_sendBufferFull := false;
	
	IF #netcmd_error AND NOT #netcmd_success THEN
	  #last_snd_err := #netcmd_status;
	  #snd_busy := false;
	  
	  IF ((#netcmd_status = W#16#80A1) OR (#netcmd_status = W#16#80C4)) THEN
	      #mqttData.ethTCPConnected := false;
	      #mqttData._state := #MQTT_STATE_DISCONNECTED;
	    #tcpState := #TCP_STATE_DISCONNECTING;
	  END_IF;
	END_IF;
	// *** PN CODE END ****
	
	
	IF (#act_send) THEN
	  #act_send := false;
	  #snd_busy := true;
	END_IF;
	
	IF (#netcmd_success AND #snd_busy) THEN
	  #snd_busy := false;
	END_IF;
	
	
	(* TCP RECEIVING *)
	
	// *** PN CODE ****
	#NET_RCV(EN_R := true // IN: BOOL
	         ,
	         ID := INT_TO_WORD(#connectionParameter.connectionID) // IN: WORD
	         ,
	         LEN := #netcmd_datalength // IN: INT
	         ,
	         DATA := #tcpRecByte // INOUT: ANY
	);
	#netcmd_datareceived := #NET_RCV.NDR; // OUT: BOOL
	#netcmd_error := #NET_RCV.ERROR; // OUT: BOOL
	#netcmd_status := #NET_RCV.STATUS; // OUT: WORD
	#netcmd_datalength := #NET_RCV.RCVD_LEN; // OUT: INT
	
	IF #netcmd_error AND ((#netcmd_status = W#16#80A1) OR (#netcmd_status = W#16#80C4)) THEN
	  #last_rec_err := #netcmd_status;
	  #mqttData._state := #MQTT_STATE_DISCONNECTED;
	  #tcpState := #TCP_STATE_DISCONNECTING;
	END_IF;
	// *** PN CODE END ****
	
	
	IF #netcmd_datareceived THEN
	    IF #mqttData.RecBufFull THEN
	    #RecBufFull := true;
	  ELSE
	      #mqttData.tcpRecBuf[#mqttData.pRec] := #tcpRecByte;
	      #mqttData.pRec := #mqttData.pRec + 1;
	      IF (#mqttData.pRec >= "mqttGlobals".TCP_RECVBUFFERSIZE) THEN
	          #mqttData.pRec := 0;
	    END_IF;
	    IF (#mqttData.pRec = #mqttData.pRead) THEN
	        #mqttData.RecBufFull := true;
	    END_IF;
	  END_IF;
	END_IF;
	
	#myPacketReader(mqttData:=#mqttData);
	
	//debug
	IF (#mqttData.pRec >= #mqttData.pRead) THEN
	    #recBufLeft := "mqttGlobals".TCP_RECVBUFFERSIZE - (#mqttData.pRec - #mqttData.pRead);
	ELSE
	    #recBufLeft := "mqttGlobals".TCP_RECVBUFFERSIZE - (#mqttData.pRead - #mqttData.pRec);
	END_IF;
	
	
	(*
	   ******************************
	   MQTT State Machine
	   ******************************
	*)
	CASE (#mqttData._state) OF
	    
	  #MQTT_STATE_DISCONNECTED:
	      #lastState := #mqttData._state;
	    // TODO: what is this for?
	      IF ((#mqttData.runTime - t#10s) > #resetTime) AND NOT #mqttData.ethTCPConnected THEN
	          #resetTime := #mqttData.runTime;
	    END_IF;
	    ;
	    
	  #MQTT_STATE_CONNECTING:  // this state is triggered by mqttConnect FC
	      IF (#mqttData._state <> #lastState) THEN
	      #intState := #WAIT_FOR_RECEIVED_PACKET;
	      #lastState := #mqttData._state;
	    END_IF;
	    
	    CASE (#intState) OF
	        
	      #WAIT_FOR_RECEIVED_PACKET:
	          IF ((#mqttData.runTime - #mqttData.lastInActivity) >= "mqttGlobals".MQTT_SOCKET_TIMEOUT) THEN
	          // Timeout!
	              #mqttData._state := #MQTT_STATE_DISCONNECTED;
	          ELSIF "mqttAvailable"(mqttData:=#mqttData) THEN
	          #myPacketReader.iBegin := true;
	          #intState := #READ_COMPLETE_PACKET;
	        END_IF;
	        ;
	        
	      #READ_COMPLETE_PACKET:
	        IF (#myPacketReader.xDone) THEN
	          
	            #typeOfPacket := BYTE_TO_INT(#mqttData.buffer[0] AND B#16#F0);
	          
	          IF (#typeOfPacket = "mqttGlobals".MQTTCONNACK) THEN
	              #mqttData.lastInActivity := #mqttData.runTime;
	              #mqttData.pingOutstanding := false;
	            
	              IF BYTE_TO_INT(#mqttData.buffer[3]) = "mqttGlobals".MQTT_CONN_ACCEPTED THEN
	                  #mqttData._state := #MQTT_STATE_CONNECTED;
	            ELSE
	              // MQTT Connection Error!
	                #mqttData._state := #MQTT_STATE_DISCONNECTED;
	              #callbackPacketType := #MQTT_CONNACK;
	              #mqttData.mqttErrorCode := BYTE_TO_INT(#mqttData.buffer[3]);
	              #callback := true;
	            END_IF;
	            // ELSE maybe need equivalent/workaround to client->stop()
	          END_IF;
	        END_IF;
	        ;
	        
	    END_CASE;
	    ;
	    
	  #MQTT_STATE_CONNECTED:
	      IF (#mqttData._state <> #lastState) THEN
	      #intState := #WAIT_FOR_RECEIVED_PACKET;
	      #lastState := #mqttData._state;
	    END_IF;
	    // Check if Keepalive timeout occured.
	    IF ((#mqttData.runTime - #mqttData.lastInActivity) > "mqttGlobals".MQTT_KEEPALIVE) OR ((#mqttData.runTime - #mqttData.lastOutActivity) > "mqttGlobals".MQTT_KEEPALIVE) THEN
	        IF (#mqttData.pingOutstanding) THEN
	        // Ping Timeout!
	            #mqttData._state := #MQTT_STATE_DISCONNECTED;
	      ELSE
	          #mqttData.buffer[0] := INT_TO_BYTE("mqttGlobals".MQTTPINGREQ);
	          #mqttData.buffer[1] := 0;
	        "mqttSendTCP"(offset := 0,
	                      size := 2,
	                      mqttData:=#mqttData);
	        #mqttData.lastOutActivity := #mqttData.runTime;
	        #mqttData.lastInActivity := #mqttData.lastOutActivity;
	        #mqttData.pingOutstanding := true;
	      END_IF;
	    END_IF;
	    
	    CASE (#intState) OF
	        
	      #WAIT_FOR_RECEIVED_PACKET:
	          IF "mqttAvailable"(mqttData:=#mqttData) THEN
	          #myPacketReader.iBegin := true;
	          #msgId := 0;
	          #intState := #READ_COMPLETE_PACKET;
	        END_IF;
	        ;
	        
	      #READ_COMPLETE_PACKET:
	        IF (#myPacketReader.xDone) THEN
	          
	          // check if received message is > 0 bytes for variable part
	          IF (#myPacketReader.result > 0) THEN
	            
	              #mqttData.lastInActivity := #mqttData.runTime;
	            
	              #typeOfPacket := BYTE_TO_INT(#mqttData.buffer[0] AND B#16#F0);
	            
	            CASE (#typeOfPacket) OF
	                
	              #MQTT_PUBLISH:
	                // received a PUBLISH, 3.3 PUBLISH – Publish message
	                // refer to MQTT Docs. section 3.3 PUBLISH – Publish message
	                
	                  #tl := WORD_TO_INT(SHL(IN := BYTE_TO_WORD(#mqttData.buffer[#myPacketReader.lengthLength + 1]), N := 8)) + BYTE_TO_INT(#mqttData.buffer[#myPacketReader.lengthLength + 2]);
	                FOR #i := 0 TO #tl - 1 DO
	                    #pubTopicChar[#i + 2] := BYTE_TO_CHAR(#mqttData.buffer[#myPacketReader.lengthLength + 3 + #i]);
	                END_FOR;
	                #pubTopicChar[1] := INT_TO_CHAR(#tl);
	                #paylPos := #myPacketReader.lengthLength + 3 + #tl;
	                #paylSize := #myPacketReader.result - #paylPos;
	                FOR #i := 0 TO #paylSize - 1 DO
	                    #payload[#i] := #mqttData.buffer[#paylPos + #i];
	                END_FOR;
	                #payloadSize := #paylSize;
	                #callback := true;
	                
	                // Check if the Publish messag has QoS = 1, if yes then send PUBACK response
	                IF BYTE_TO_INT(#mqttData.buffer[0] AND B#16#01) = 1 THEN
	                    "mqttPUBACK"(packetIdMSB := #mqttData.buffer[#paylPos - 2],
	                                 packetIdLSB := #mqttData.buffer[#paylPos - 1],
	                                 mqttData:=#mqttData);
	                END_IF;
	                ;
	                
	              #MQTT_PINGRESP:
	                // received a PINGRESP, part of MQTT 3.1.2.10 Keep Alive
	                // (refer MQTT Docs. section 3.1.2.10 Keep Alive, 3.12 PINGREQ – PING request, 3.13 PINGRESP – PING response)
	                
	                  #mqttData.pingOutstanding := false;
	                ;
	                
	              #MQTT_PUBACK:
	                // received a PUBACK package, part of MQTT QoS 1 handshake
	                // (refer MQTT Docs. section 4.3.2 QoS 1: AT least once delivery)
	                
	                #callbackPacketType := "mqttGlobals".MQTTPUBACK;
	                // get the packet ID of the PubAck package and store it in mqttData.recPublishPacketID
	                #structTmpPacketId.byteMSB := #mqttData.buffer[3];
	                #structTmpPacketId.byteLSB := #mqttData.buffer[2];
	                #mqttData.recPublishPacketID := #tmpPacketID;
	                #callback := true;
	                ;
	                
	              #MQTT_PUBREC:
	                // received a PUBREC package, part of MQTT QoS 2 handshake
	                // (refer MQTT Docs. section 4.3.3 QoS 2: Exactly once delivery)
	                
	                // get the packet ID of the PubAck package and store it in mqttData.recPublishPacketID
	                  #structTmpPacketId.byteMSB := #mqttData.buffer[3];
	                  #structTmpPacketId.byteLSB := #mqttData.buffer[2];
	                // send out a PUBREL packet
	                  #mqttData.buffer[0] := INT_TO_BYTE("mqttGlobals".MQTTPUBREL);
	                  #mqttData.buffer[0] := #mqttData.buffer[0] OR SHL(IN := INT_TO_BYTE("mqttGlobals".MQTTQOS1), N := 1); // set qos flag to 2
	                  #mqttData.buffer[1] := 16#02;
	                "mqttSendTCP"(offset := 0,
	                              size := 4,
	                              mqttData:=#mqttData);
	                #mqttData.lastOutActivity := #mqttData.runTime;
	                ;
	                
	              #MQTT_PUBCOMP:
	                // received a PUBCOMP package, part of MQTT QoS 2 handshake
	                // (see MQTT Docs. section 4.3.3 QoS 2: Exactly once delivery)
	                
	                // notify about successfull QoS 2 handshake
	                #callbackPacketType := "mqttGlobals".MQTTPUBCOMP;
	                // get the packet ID of the PubAck package and store it in mqttData.recPublishPacketID
	                #structTmpPacketId.byteMSB := #mqttData.buffer[3];
	                #structTmpPacketId.byteLSB := #mqttData.buffer[2];
	                #mqttData.recPublishPacketID := #tmpPacketID;
	                #callback := true;
	                ;
	                
	            END_CASE; // typeOfPacket
	            
	          END_IF; // myPacketReader.result > 0
	          
	          #intState := #WAIT_FOR_RECEIVED_PACKET;
	          
	        END_IF; // myPacketReader.xDone
	        ;
	        
	    END_CASE; //intState
	    
	END_CASE; // mqttData._state
	
	
END_FUNCTION_BLOCK

DATA_BLOCK "MQTT_DB"
{ DB_Accessible_From_OPC_UA := 'FALSE' ;
 S7_Optimized_Access := 'FALSE' }
AUTHOR : Maul
VERSION : 1.0
NON_RETAIN
"MQTT"

BEGIN

END_DATA_BLOCK

